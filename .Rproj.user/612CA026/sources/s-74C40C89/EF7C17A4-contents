library(rlang)
library(readr)
library(tidyr)
library(dplyr)
library(stringr)
library(purrr)
library(magrittr)
library(rjson)
library(xml2)
library(rvest)
library(zoo)
library(lubridate)
library(readxl)
library(ggplot2)


fipsCodes <- read_csv(file = "./referenceFiles/fipsCodesTable.csv", 
                      col_types = "ccc") %>% 
  mutate(FIPS = if_else(nchar(FIPS) < 5, paste0("0", FIPS), FIPS),
         Name = case_when(Name == "New York" ~ "Manhattan",
                          Name == "Richmond" & State == "NY" ~ "Staten Island",
                          Name == "Kings" & State == "NY" ~ "Brooklyn",
                          T ~ Name))

TriStateareacounties <- fipsCodes %>% 
  filter((Name %in% c("Westchester", "Putnam", "Rockland", "Queens", "Brooklyn", "Bronx",
                      "Suffolk", "Nassau", "Staten Island", "Sullivan", "Ulster") & State == "NY") | State == "NJ" | State == "CT") %>% 
  pull(FIPS)

newsTwelveTriState <- fipsCodes %>% 
  filter((Name %in% c("Westchester", "Queens", "Brooklyn", 
                      "Bronx", "Suffolk", "Nassau", "Staten Island", "Manhattan") & State == "NY")
         | (Name %in% c("Bergen", "Hudson", "Morris", "Monmouth") & State == "NJ")
         | (Name %in% c("Fairfield", "New Haven", "Litchfield", "Hartford") & State == "CT")) %>% 
  pull(FIPS)

nycCountyFips <- fipsCodes %>% 
  filter((Name %in% c("Queens", "Brooklyn", 
                      "Bronx", "Staten Island", "Manhattan") & State == "NY")) %>% 
  pull(FIPS)

tibble(
  name = state.name,
  abb = state.abb
) -> stateRef

safe_extract <- function(l, wut) {
  res <- l[wut]
  null_here <- map_lgl(res, is.null)
  res[null_here] <- NA
  res
}

makeHistLinesState <- function(df, ymeasure, xmeasure) {
  yVar <- sym(ymeasure)
  xVar <- sym(xmeasure)
  
  plt <- ggplot(df, aes(x = !!xVar, y = !!yVar)) + geom_line() + geom_hline(yintercept = 0) +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1, scale = 1)) +
    theme(legend.position = "none", axis.title = element_blank(),
          axis.ticks = element_blank(), axis.text.x = element_text(face = "bold", color = "black"),
          plot.background = element_blank()) 
  
  ggsave(filename = paste0("./vizFiles/historicalLines/otTriState", 
                           str_replace_all(unique(df$State), "\\s+", "_"),
                           "Historical.png"), 
         plot = plt)
  
}

makeMonthlyAverageBars <- function(df, ymeasure, xmeasure) {
  yVar <- sym(ymeasure)
  xVar <- sym(xmeasure)
  
  if (ymeasure == "monthlyAvgOT") {
    plt <- ggplot(df, mapping = aes(x = !!xVar, y = !!yVar, fill = !!yVar)) + 
      geom_col() + 
      geom_text(aes(label = paste0(round(!!yVar, 1), "%")), vjust = 1.3,
                             color = "black") + scale_fill_steps2(low = "#a50026", mid = "#ffffbf", high = "#91cf60",
                                                                  midpoint = 0) +
      scale_x_date(date_labels = "%b %Y") + 
      theme_classic() +
      theme(legend.position = "none", axis.title = element_blank(), axis.text.y = element_blank(),
            axis.ticks = element_blank(), axis.text.x = element_text(face = "bold", color = "black"),
            plot.background = element_blank()) +
      labs(title = paste(unique(df$State), "Restaurant Reservations"),
           subtitle = "Monthly average of percent change in restaurant reservations from prepandemic baseline",
           caption = paste0("Data in latest month current as of ", format(unique(df$maxDate), "%m/%d/%y"), ". Source: OpenTable"))
    ggsave(filename = paste0("./vizFiles/currentBars/", pull(stateRef[which(stateRef$name == unique(df$State)), "abb"]), "_OpenTable.png"), plot = plt)
    
  } else if (ymeasure == "monthAvgSB") {
    plt <- ggplot(df, mapping = aes(x = !!xVar, y = !!yVar, fill = !!yVar)) + 
      geom_col() + geom_text(aes(label = paste0(round(!!yVar, 1), "%")), vjust = 1.3,
                             color = "black") + scale_fill_steps2(low = "#a50026", mid = "#ffffbf", high = "#ffffbf",
                                                                  midpoint = 0) +
      theme_classic() +
      theme(legend.position = "none", axis.title = element_blank(), axis.text.y = element_blank(),
            axis.ticks = element_blank(), axis.text.x = element_text(face = "bold", color = "black"),
            plot.background = element_blank()) +
      labs(title = paste(pull(stateRef[which(stateRef$abb == unique(df$State)), "name"]), "Small Business Employees Working"),
           subtitle = "Monthly average percent change in the distinct number of hourly workers with at least one clock-in",
           caption = paste0("Data current as of ", format(unique(df$maxDate), "%m/%d/%y"), ". Baseline is indexed to January 2021 and is not seasonally adjusted. Source: Homebase"))
    
    ggsave(filename = paste0("./vizFiles/currentBars/", unique(df$State), "_SmallBiz.png"), plot = plt)
  }
  
}

otUpdate <- tryCatch({
  
  otScripts <- read_html("https://www.opentable.com/state-of-industry") %>%
    html_nodes("script")
  
  otDataScript <- which(map_lgl(map_chr(otScripts, html_text), ~str_detect(.x, "__INITIAL_STATE__")))
  
  otRawText <- otScripts %>%
    nth(otDataScript) %>%
    html_text()
  
  Sys.sleep(5)
  
  otRawJSON <- otRawText %>% 
    str_match(regex("covidDataCenter\":(.*)\\};w.__TRANSLATIONS", dotall = T)) %>%
    nth(2)
  
  Sys.sleep(5)
  
  otData <- otRawJSON %>%
    fromJSON(json_str = .)
  
  otChrDates <- otData %>% 
    # extract2("covidDataCenter") %>% 
    extract2("fullbook") %>% 
    extract2("headers")
  
  otDates <- map(otChrDates, ~base::as.Date(.x, "%Y/%m/%d")) %>% 
    flatten_dbl() %>% 
    base::as.Date(origin = "1970-01-01")
  
  otDatesFixed <- seq.Date(from = base::as.Date("2020-02-18"), by = "day", length.out = length(otDates))
  
  # if (any(otDates != otDatesFixed)) {
  #   stop("Open Table dates do not align")  
  # }
  
  otYoY <- otData %>% 
    # extract2("covidDataCenter") %>% 
    extract2("fullbook") %>% 
    extract2("states") %>% 
    map_dfr(., ~tibble(
      YoY = .$yoy,
      State = .$name
    )) %>% 
    filter(State %in% c("New York", "New Jersey", "Connecticut"))
  
  Sys.sleep(3)
  
  triStateOTLatest <- otYoY %>% 
    mutate(Date = rep(otDates, 3))
  
  write_csv(triStateOTLatest, "./dataFiles/triStateOT.csv")
  
  triStateOTTrailingSeven <- triStateOTLatest %>% 
    group_split(State) %>% 
    map(function(x) {
      y <- x %>% 
        mutate(YoYTrailSeven = rollmean(YoY, k = 7, fill = NA_real_, align = "right")) %>% 
        filter(!is.na(YoYTrailSeven))
      return(y)
    }) %>% 
    map_df(bind_rows)
  
  write_csv(triStateOTTrailingSeven, "./dataFiles/triStateOTTrailingSeven.csv")
  
  triStateOTLatest %>% 
    mutate(Month = rollback(Date, roll_to_first = T),
           maxDate = if_else(day(max(Date)) >= 15, max(Date), rollforward(max(Date) %m-% months(1))),
           minDate = if_else(day(maxDate) >= 15, floor_date(maxDate %m-% months(3), "months"), floor_date(maxDate %m-% months(4), "months"))
           ) %>% 
    filter(between(Date, unique(minDate), unique(maxDate))) %>% 
    select(-minDate) %>% 
    group_split(State) %>% 
    map(function(x) {
      y <- x %>% 
        group_by(Month, State, maxDate) %>% 
        summarize(monthlyAvgOT = mean(YoY, na.rm = T)) %>% 
        ungroup() 
      
      return(y)
    }) %>% 
    walk(~write_csv(x = .x, file = paste0("./dataFiles/", str_remove_all(unique(.x$State), "\\s*"), "_OT_Monthly_Grouped.csv"))) %>% 
    walk(~makeMonthlyAverageBars(df = .x, ymeasure = "monthlyAvgOT", xmeasure = "Month"))
  
  triStateOTTrailingSeven %>% 
    group_split(State) %>% 
    walk(~makeHistLinesState(.x, ymeasure = "YoYTrailSeven", xmeasure = "Date"))
  
  triStateOTHistPlt <- triStateOTLatest %>% 
    group_split(State) %>% 
    map(function(x) {
      y <- x %>% 
        mutate(YoYTrailSeven = rollmean(YoY, k = 7, fill = 0, align = "right"))
      return(y)
    }) %>% 
    map_df(bind_rows) %>% 
    ggplot(aes(x = Date, y = YoYTrailSeven)) + geom_line(aes(color = State))
  
  ggsave(filename = "./vizFiles/historicalLines/otTriStateHistorical.png", 
         plot = triStateOTHistPlt)
  
  triStateOTCurrentPlt <- triStateOTLatest %>% 
    filter(Date == max(Date)) %>% 
    ggplot(aes(x = State, y = YoY)) + geom_col()
  
  ggsave(filename = "./vizFiles/currentBars/otTriStateCurrent.png",
         plot = triStateOTCurrentPlt)

  }, 
error = function(e) {
  eFull <- error_cnd(class = "openTableError", message = paste("An error occured with the Open Table update:", 
                                                               e, "on", Sys.Date(), "\n"))
  
  write(eFull[["message"]], "./errorLog.txt", append = T)
  
  return(eFull)
}
)

Sys.sleep(5)

googleMobilityUpdate <- tryCatch({
  
  oiGoogleMobility <- read_csv(file = "https://raw.githubusercontent.com/OpportunityInsights/EconomicTracker/main/data/Google%20Mobility%20-%20County%20-%20Daily.csv") %>% 
    mutate(countyfips = if_else(nchar(countyfips) < 5, paste0("0", countyfips), as.character(countyfips)),
           Date = base::as.Date(paste0(year, "-", month, "-", day)),
           across(starts_with("gps_"), ~round((as.double(.x) * 100), 1))) %>% 
    filter(countyfips %in% newsTwelveTriState) %>% 
    inner_join(fipsCodes, by = c("countyfips" = "FIPS")) %>% 
    select(-c(year, month, day))
     
  write_csv(oiGoogleMobility, "./dataFiles/ny12GoogleMobility.csv")
  
  names(select(oiGoogleMobility, starts_with("gps_"))) -> mobilityColnames
   
  makeMobilityCharts <- function(c, df) {
    colName = sym(c)
    
    if (c == "gps_transit_stations") {
      df <- df %>% filter(Name != "Litchfield")
    }
    
    df %>% 
      select(Date, Name, State, countyfips, !!colName) %>% 
      mutate(County = paste0(Name, ', ', State)) %>% 
      select(-c(Name, State)) %>% 
      pivot_wider(!countyfips, names_from = County, values_from = !!colName) %>% 
      drop_na() %>% 
      mutate(across(contains(", "), ~rollmean(.x, k = 7, fill = NA_real_, align = "right"))) %>% 
      drop_na() %>% 
      rowwise() %>% 
      mutate(`NYC, NY` = weighted.mean(x = c_across(c(10, 11, 13, 14, 15)), w = c(.16,
                                                                                  .3046,
                                                                                  .2392,
                                                                                  .2443,
                                                                                  .0518))) %>% 
      ungroup() %>% 
      filter(Date == max(Date)) %>% 
      pivot_longer(!Date, names_to = "County", values_to = c) %>% 
      separate(col = County, into = c("County", "State"), sep = ", ") %>% 
      filter(!(County %in% c("Bronx", "Brooklyn", "Manhattan", "Queens", "Staten Island"))) %>% 
      group_split(State) %>% 
      walk(function(z, measure = c) {
        colName = sym(measure)
        
        plt <- ggplot(z, mapping = aes(x = reorder(County, !!colName), y = !!colName,
                                       fill = !!colName)) + geom_col() +
          expand_limits(y = c(min(pull(z[measure])) - 2, max(pull(z[measure])) + 3)) +
          geom_text(aes(label = paste0(round(!!colName, 1), "%")), hjust = -.3, 
                                 color = "black") + coord_flip() + scale_fill_steps2(low = "#a50026", mid = "#ffffbf", high = "#91cf60",
                                                                                     midpoint = 0, nice.breaks = F) +
          theme_classic() +
          theme(legend.position = "none", axis.title = element_blank(), axis.text.x = element_blank(),
                axis.ticks = element_blank(), axis.text.y = element_text(face = "bold", color = "black"),
                plot.background = element_blank()) +
          labs(title = paste0(pull(stateRef[which(stateRef$abb == unique(z$State)), "name"]), 
                              str_remove(str_replace_all(measure, "_", " "), "gps"),
                              " by County"),
               subtitle = paste0("Change in seven day average of ", str_remove(str_replace_all(measure, "_", " "), "gps"), " movement from pre-pandemic levels"),
               caption = paste0("Data current as of ", format(unique(z$Date), "%m/%d/%y"),  ". Source: Google COVID-19 Community Mobility Reports via Opportunity Insights"))
        
        ggsave(filename = paste0("./vizFiles/currentBars/transportVizes/", 
                                 unique(z$State), "_", 
                                 measure, ".png"), plot = plt)
      })
  }
  
  walk(mobilityColnames, ~makeMobilityCharts(c = .x, df = oiGoogleMobility))


}, 
error = function(e) {
  eFull <- error_cnd(class = "googleMobilityError", message = paste("An error occured with the Google Mobility update:", 
                                                               e, "on", Sys.Date(), "\n"))
  
  write(eFull[["message"]], "./errorLog.txt", append = T)
  
  return(eFull)
}
)
  
Sys.sleep(5)

unemploymentUpdate <- tryCatch({
  
  allTriStateUnemp <- read_csv("./dataFiles/triStateUnempCombo.csv",
                               col_types = "ccdD")
  
  download.file(url = "https://www1.ctdol.State.ct.us/lmi/laus/LAUS%20SubState%202021.xlsx",
                destfile = "./referenceFiles/ctUnempRate21.xlsx",
                method = "libcurl")
  
  read_excel(path = "./referenceFiles/ctUnempRate21.xlsx",
             sheet = "LAUS File", col_names = T) %>% 
    select(c("Area Code", "Area Title", "Data Type") | contains("2021")) %>% 
    filter(`Area Code` %in% c("CN0900100000000",
                              "CN0900300000000",
                              "CN0900500000000",
                              "CN0900700000000",
                              "CN0900900000000",
                              "CN0901100000000",
                              "CN0901300000000",
                              "CN0901500000000"),
           `Data Type` == "Unemployment Rate") %>% 
    select(-c(`Area Code`, `Data Type`)) %>% 
    mutate(across(contains("2021"), as.numeric)) %>% 
    pivot_longer(!`Area Title`, names_to = "Month", values_to = "Unemp_Rate") %>% 
    mutate(Date = parse_date(str_extract(Month, "\\w{3}\\s*\\d{4}"), format = "%b %Y")) %>% 
    separate(col = `Area Title`, into = c("County", "State"), sep = ", ") %>% 
    mutate(County = str_trim(str_remove(County, "\\sCounty"))) %>% 
    select(-Month) -> ctUnempLatest
  
  download.file(url = "https://nj.gov/labor/lpa/employ/uirate/lfmth_2021.xlsx",
                destfile = "./referenceFiles/njUnempRate21.xlsx",
                method = "libcurl")
  
  read_excel(path = "./referenceFiles/njUnempRate21.xlsx",
             sheet = "lfmth", col_names = T, skip = 11) %>% 
    filter(!is.na(JAN), `COUNTY/LABOR AREA` == "Unemployment Rate (%)") %>% 
    mutate(County = c("Atlantic County",
                      "Bergen County",
                      "Burlington County",
                      "Camden County",
                      "Cape May County",
                      "Cumberland County",
                      "Essex County",
                      "Gloucester County",
                      "Hudson County",
                      "Hunterdon County",
                      "Mercer County",
                      "Middlesex County",
                      "Monmouth County",
                      "Morris County",
                      "Ocean County",
                      "Passaic County",
                      "Salem County",
                      "Somerset County",
                      "Sussex County",
                      "Union County",
                      "Warren County",
                      "Bergen-Hudson-Passaic Labor Area",
                      "Camden, NJ Metropolitan Division",
                      "Middlesex-Monmouth-Ocean Labor Area",
                      "Newark, NJ-PA Metropolitan Division",
                      "Newark, NJ-PA Metropolitan Division, NJ part",
                      "New Jersey")) %>% 
    select(-`COUNTY/LABOR AREA`) %>% 
    pivot_longer(!County, names_to = "Month", values_to = "Unemp_Rate") %>% 
    filter(!is.na(Unemp_Rate)) %>% 
    mutate(State = "NJ", Date = parse_date(paste(str_to_title(Month), "2021", sep = " "), 
                                            format = "%b %Y")) %>% 
    select(-Month) %>% 
    filter(str_detect(County, "County")) %>% 
    relocate(State, .before = Unemp_Rate) %>% 
    mutate(County = str_trim(str_remove(County, "\\sCounty"))) -> njUnempLatest
  
  
  download.file(url = "https://dol.ny.gov/statistics-urrankxls",
                destfile = "./referenceFiles/nyUnempRate21.xls",
                method = "libcurl")
  
  read_excel(path = "./referenceFiles/nyUnempRate21.xls",
             sheet = "COUNTIES",
             skip = 3,
             .name_repair = "unique") %>% 
    select(contains(c("COUNTY", "RATE"))) %>% 
    filter(!is.na(`COUNTY...2`)) -> nyUnsplit
  
  read_excel(path = "./referenceFiles/nyUnempRate21.xls",
             sheet = "COUNTIES",
             skip = 1,
             n_max = 2,
             col_names = F,
             .name_repair = "unique") %>% 
    pull() %>% 
    str_to_title() -> nyUnempMonth
  
  read_excel(path = "./referenceFiles/nyUnempRate21.xls",
             sheet = "MSAS",
             skip = 3,
             ) %>% 
    filter(MSA == "New York City") %>% 
    pull(RATE) -> nycUnempRate
  
  tibble(County = c(nyUnsplit$COUNTY...2, nyUnsplit$COUNTY...6, "NYC"),
         State = "NY",
         Unemp_Rate = c(nyUnsplit$RATE...3, nyUnsplit$RATE...7, nycUnempRate)) %>% 
    mutate(Date = parse_date(nyUnempMonth, 
                              format = "%B %Y"),
           County = str_trim(str_remove(County, "\\sCounty"))) -> nyUnempLatest
  
    
    if(max(ctUnempLatest$Date) > max(filter(allTriStateUnemp, State == "CT")$Date)) {
      ctUnempLatestMonth <- ctUnempLatest %>% filter(Date == max(Date))
      
      allTriStateUnemp <- bind_rows(allTriStateUnemp, ctUnempLatestMonth)
    }
  
    if(max(njUnempLatest$Date) > max(filter(allTriStateUnemp, State == "NJ")$Date)) {
      njUnempLatestMonth <- njUnempLatest %>% filter(Date == max(Date))
      
      allTriStateUnemp <- bind_rows(allTriStateUnemp, njUnempLatest)
    }
  
    if(max(nyUnempLatest$Date) > max(filter(allTriStateUnemp, State == "NY")$Date)) {
      nyUnempLatestMonth <- nyUnempLatest
      
      allTriStateUnemp <- bind_rows(allTriStateUnemp, nyUnempLatest)
    }
  
  write_csv(allTriStateUnemp, "./dataFiles/triStateUnempCombo.csv")
  
  allTriStateUnemp %>% 
    filter((State == "CT" & County %in% c("Litchfield", "Hartford", "New Haven", "Fairfield")) |
           (State == "NJ" & County %in% c("Bergen", "Hudson", "Morris", "Monmouth")) |
           (State == "NY" & County %in% c("NYC", "Westchester", "Nassau", "Suffolk"))) %>% 
    group_split(State) %>% 
    walk(function(df) {
      df <- df %>% filter(Date == max(Date))
      
      plt <- ggplot(df, mapping = aes(x = reorder(County, Unemp_Rate), y = Unemp_Rate, fill = as.factor(Unemp_Rate))) +
        geom_col() + 
        geom_text(aes(label = paste0(round(Unemp_Rate, 1), "%")), hjust = 1, 
                  color = "black") + scale_fill_brewer(palette = "YlOrBr", type = "Seq") + coord_flip() +
        theme_classic() +
        theme(legend.position = "none", axis.title = element_blank(), axis.text.x = element_blank(),
              axis.ticks = element_blank(), axis.text.y = element_text(face = "bold", color = "black"),
              plot.background = element_blank()) + 
        labs(title = paste(pull(stateRef[which(stateRef$abb == unique(df$State)), "name"]), 
                           "Unemployment Rate by County"),
             subtitle = paste("As of", lubridate::month(unique(df$Date), label = T, abbr = F),
                              lubridate::year(unique(df$Date))),
             caption = paste(pull(stateRef[which(stateRef$abb == unique(df$State)), "name"]), "Department of Labor"))
      
      ggsave(filename = paste0("./vizFiles/currentBars/", unique(df$State), "_Unemp_",
                               unique(df$Date), ".png"),
             plot = plt)
    })

  
}, 
error = function(e) {
  eFull <- error_cnd(class = "unemploymentError", message = paste("An error occured with the Unemployment update:", 
                                                                    e, "on", Sys.Date(), "\n"))
  
  write(eFull[["message"]], "./errorLog.txt", append = T)
  
  return(eFull)
}
)

Sys.sleep(5)

vaccineUpdate <- tryCatch({
  
  triStateAllToday <- fromJSON(file = "https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=vaccination_county_condensed_data") %>% 
    extract2("vaccination_county_condensed_data") %>%   
    map_df(safe_extract) %>% 
    filter(FIPS %in% newsTwelveTriState) %>% 
    rename(State = StateName, Vaccine_Date = Date) %>% 
    mutate(Vaccine_Date = base::as.Date(Vaccine_Date), 
           County = str_remove_all(County, "\\sCounty"),
           StateAbbr = str_trim(StateAbbr),
           Total_Pop = round(Series_Complete_Yes / (Series_Complete_Pop_Pct / 100)),
           Twelve_Plus_Pop = round(Series_Complete_12Plus / (Series_Complete_12PlusPop_Pct / 100)),
           Eighteen_Plus_Pop = round(Series_Complete_18Plus / (Series_Complete_18PlusPop_Pct / 100)),
           Twelve_to_Eighteen_Pop = Twelve_Plus_Pop - Eighteen_Plus_Pop,
           Twelve_to_Eighteen_Complete = Series_Complete_12Plus - Series_Complete_18Plus,
           Twelve_to_Eighteen_Complete_Pct = round((Twelve_to_Eighteen_Complete / Twelve_to_Eighteen_Pop) * 100, 1)) 
  
  nycRow <- tibble(
    Vaccine_Date = unique(triStateAllToday$Vaccine_Date),
    State = "New York",
    StateAbbr = "NY",
    County = "NYC",
    Series_Complete_Pop_Pct = round(sum(filter(triStateAllToday, FIPS %in% nycCountyFips)$Series_Complete_Yes) / sum(filter(triStateAllToday, FIPS %in% nycCountyFips)$Total_Pop) * 100, 1),
    Twelve_to_Eighteen_Complete_Pct = round(sum(filter(triStateAllToday, FIPS %in% nycCountyFips)$Twelve_to_Eighteen_Complete) / sum(filter(triStateAllToday, FIPS %in% nycCountyFips)$Twelve_to_Eighteen_Pop) * 100, 1)
  )
  
  triStateAllToday %>% 
    select(Vaccine_Date, State, StateAbbr, County, Series_Complete_Pop_Pct, Twelve_to_Eighteen_Complete_Pct, FIPS) %>% 
    filter(!(FIPS %in% nycCountyFips)) %>% 
    select(-FIPS) %>% 
    bind_rows(nycRow) %>%
    group_split(State) %>% 
    walk(~write_csv(x = .x, file = paste0("./dataFiles/", unique(.x$StateAbbr), "_Vaccine_Latest.csv"))) %>% 
    walk(function(x) {
      plt <- ggplot(x, aes(x = reorder(County, Series_Complete_Pop_Pct))) +
        expand_limits(y = max(x$Series_Complete_Pop_Pct) + 7.5) +
        geom_col(aes(y = Series_Complete_Pop_Pct), fill = "gray") +
        geom_text(aes(y = Series_Complete_Pop_Pct, label = paste0("Total:\n", round(Series_Complete_Pop_Pct, 1), "%")), hjust = -.7,
                  color = "black") +
        geom_col(aes(y = Twelve_to_Eighteen_Complete_Pct), fill = "black", width = 0.5) +
        geom_text(aes(y = Twelve_to_Eighteen_Complete_Pct, label = paste0("12-18:\n", round(Twelve_to_Eighteen_Complete_Pct, 1), "%")), hjust = 1.5,
                  color = "white", size = 4) +
        coord_flip() +
        theme_classic() +
        theme(legend.position = "none", axis.title = element_blank(), axis.text.x = element_blank(),
              axis.ticks = element_blank(), axis.text.y = element_text(face = "bold", color = "black"),
              plot.background = element_blank()) +
        labs(title = paste(unique(x$State), "COVID-19 Vaccination by County"),
             subtitle = "Percent of population fully vaccinated against COVID-19",
             caption = paste0("Data current as of ", format(unique(x$Vaccine_Date), "%m/%d/%y"), ". Source: Center for Disease Control"))
      
      ggsave(filename = paste0("./vizFiles/currentBars/", unique(x$State), "_Vax_Latest.png"), plot = plt)
    })
  
  write_csv(triStateAllToday, "./dataFiles/ny12Vax.csv")
  
}, 
error = function(e) {
  eFull <- error_cnd(class = "vaccineError", message = paste("An error occured with the vaccine update:", 
                                                                  e, "on", Sys.Date(), "\n"))
  
  write(eFull[["message"]], "./errorLog.txt", append = T)
  
  return(eFull)
}
)  

Sys.sleep(5)

bridgesTunnelsUpdate <- tryCatch({
  
  bridgesAndTunnels19 <- read_csv("./referenceFiles/Hourly_Traffic_on_Metropolitan_Transportation_Authority__MTA__Bridges_and_Tunnels__Beginning_2010.csv",
                                  col_types = "c?ccii") %>% 
    mutate(Date = lubridate::mdy(Date), weekAndDay = paste0(lubridate::isoweek(Date), "-", lubridate::wday(Date))) %>% 
    filter(between(Date, base::as.Date("2019-01-01"), base::as.Date("2019-12-31"))) %>% 
    group_by(`Plaza ID`, Date, weekAndDay) %>% 
    summarize(ezPassVehicles19 = sum(`# Vehicles - E-ZPass`)) %>% 
    ungroup()
  
  
  latestDay <- fromJSON(file = "https://data.ny.gov/resource/qzve-kjga.json") %>% 
    map_df(`[`) %>% 
    mutate(date = base::as.Date(date), 
           vehicles_e_zpass = as.integer(vehicles_e_zpass),
           weekAndDay = paste0(lubridate::isoweek(date), "-", lubridate::wday(date))) %>% 
    filter(date == max(date)) %>% 
    group_by(plaza_id, date, weekAndDay) %>% 
    summarize(ezPassVehiclesnew = sum(vehicles_e_zpass)) %>% 
    ungroup()
  
  bridgesAndTunnels19Ref <- read_csv("./referenceFiles/bridgesAndTunnelsReference.csv",
                                     col_types = "ccddc")
  
  latestDay %>% 
    inner_join(bridgesAndTunnels19, by = c("plaza_id" = "Plaza ID", "weekAndDay" = "weekAndDay")) %>% 
    inner_join(bridgesAndTunnels19Ref, by = "plaza_id") %>% 
    mutate(yoyChange = ((ezPassVehiclesnew - ezPassVehicles19) / ezPassVehicles19) * 100,
           scale = rep(1.8, 10),
           `text-bold` = rep(T, 10),
           `text-fontSize` = rep(16, 10),
           icon = "circle",
           tooltip = paste0("<strong>", 
                            round(yoyChange, 2), 
                            "% ", 
                            if_else(yoyChange > 0, "increase", "decrease"), 
                            "</strong> as of <strong>",
                            base::format(date, "%m/%d/%Y"),
                            "</strong>")) %>% 
    select(-c(plaza_id, weekAndDay, ezPassVehiclesnew, Date, ezPassVehicles19)) -> bAndTNoColor 
  
  numPos <- sum(bAndTNoColor$yoyChange > 0, na.rm = T)
  numNeg <- sum(bAndTNoColor$yoyChange < 0, na.rm = T)
  
  # Colors from: http://eyetracking.upol.cz/color/
  
  posColors <- c("#f8fdf5", "#f0fbea", "#e9f8df", "#def5d1", "#d2f1c0",
                 "#c3edac", "#b2e896", "#9de17c", "#84db5f", "#67d33d")
  negColors <- c("#fdd3cc", "#fac5bd", "#f7b5ab", "#f4a59a", "#f09589",
                 "#eb8578", "#e57468", "#df6358", "#d9534a", "#d3423d")
  
  if (numPos == 0) {
    color <- negColors
  } else if (numNeg == 0) {
    color <- rev(posColors)
  } else {
    allPos <- rev(posColors[1:numPos])
    allNeg <- negColors[1:numNeg]
    color <- c(allPos, allNeg)
  }
  
  bridgesAndTunnelsLatest <- bAndTNoColor %>% 
    arrange(desc(yoyChange)) %>% 
    mutate(color = color, markerSymbol = 1:10)
  
  bridgesAndTunnelsLatest %>% 
    write_csv("./dataFiles/bridgesAndTunnelsLatest.csv")

}, 
error = function(e) {
  eFull <- error_cnd(class = "bridgesTunnelsError", message = paste("An error occured with the Bridges & Tunnels update:", 
                                                             e, "on", Sys.Date(), "\n"))
  
  write(eFull[["message"]], "./errorLog.txt", append = T)
  
  return(eFull)
}
)  

Sys.sleep(5)

if (any(map_lgl(list(otUpdate, googleMobilityUpdate, vaccineUpdate, 
                     bridgesTunnelsUpdate, unemploymentUpdate), ~class(.x)[2] == "rlang_error"), 
        na.rm = T)) {
  stop("There was an error in the update, check error log...")
  
}   






